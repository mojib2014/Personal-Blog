{"ast":null,"code":"import visit from 'unist-util-visit';\nimport extend from 'extend';\nconst behaviors = {\n  prepend: 'unshift',\n  append: 'push'\n};\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {\n    className: ['icon', 'icon-link']\n  },\n  children: []\n};\nconst defaults = {\n  behavior: 'prepend',\n  content: contentDefaults\n};\nconst splice = [].splice;\nlet deprecationWarningIssued = false;\nexport default function attacher(options = {}) {\n  let {\n    linkProperties,\n    behavior,\n    content,\n    group\n  } = { ...defaults,\n    ...options\n  };\n  let method; // NOTE: Remove in next major version\n\n  if (options.behaviour !== undefined) {\n    if (!deprecationWarningIssued) {\n      deprecationWarningIssued = true;\n      console.warn('[remark-autolink-headings] Deprecation Warning: `behaviour` is a nonstandard option. Use `behavior` instead.');\n    }\n\n    behavior = options.behaviour;\n  }\n\n  if (behavior === 'wrap') {\n    method = wrap;\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around;\n  } else {\n    method = inject;\n\n    if (!linkProperties) {\n      linkProperties = {\n        ariaHidden: 'true',\n        tabIndex: -1\n      };\n    }\n  }\n\n  return tree => visit(tree, 'heading', visitor);\n\n  function visitor(node, index, parent) {\n    const {\n      data\n    } = node;\n    const id = data && data.hProperties && data.hProperties.id;\n\n    if (id) {\n      return method(node, '#' + id, index, parent);\n    }\n  }\n\n  function inject(node, url) {\n    const link = create(url);\n    link.data = {\n      hProperties: toProps(linkProperties),\n      hChildren: toChildren(content, node)\n    };\n    node.children[behaviors[behavior]](link);\n  }\n\n  function around(node, url, index, parent) {\n    const link = create(url);\n    const grouping = group ? toGrouping(group, node) : undefined;\n    link.data = {\n      hProperties: toProps(linkProperties),\n      hChildren: toChildren(content, node)\n    };\n    let nodes = behavior === 'before' ? [link, node] : [node, link];\n\n    if (grouping) {\n      grouping.children = nodes;\n      nodes = grouping;\n    }\n\n    splice.apply(parent.children, [index, 1].concat(nodes));\n    return [visit.SKIP, index + nodes.length];\n  }\n\n  function wrap(node, url) {\n    const link = create(url, node.children);\n    link.data = {\n      hProperties: toProps(linkProperties)\n    };\n    node.children = [link];\n  }\n\n  function toProps(value) {\n    return deepAssign({}, value);\n  }\n\n  function toNode(value, node) {\n    return typeof value === 'function' ? value(node) : value;\n  }\n\n  function toChildren(value, node) {\n    let children = toNode(value, node);\n    children = Array.isArray(children) ? children : [children];\n    return typeof value === 'function' ? children : deepAssign([], children);\n  }\n\n  function toGrouping(value, node) {\n    const grouping = toNode(value, node);\n    const hName = grouping.tagName;\n    const hProperties = grouping.properties;\n    return {\n      type: 'heading-group',\n      data: {\n        hName,\n        hProperties: typeof value === 'function' ? deepAssign({}, hProperties) : hProperties\n      },\n      children: []\n    };\n  }\n\n  function create(url, children) {\n    return {\n      type: 'link',\n      url,\n      title: null,\n      children: children || []\n    };\n  }\n\n  function deepAssign(base, value) {\n    return extend(true, base, value);\n  }\n}","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/node_modules/remark-autolink-headings/src/index.js"],"names":["visit","extend","behaviors","prepend","append","contentDefaults","type","tagName","properties","className","children","defaults","behavior","content","splice","deprecationWarningIssued","attacher","options","linkProperties","group","method","behaviour","undefined","console","warn","wrap","around","inject","ariaHidden","tabIndex","tree","visitor","node","index","parent","data","id","hProperties","url","link","create","toProps","hChildren","toChildren","grouping","toGrouping","nodes","apply","concat","SKIP","length","value","deepAssign","toNode","Array","isArray","hName","title","base"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,SAAS,GAAG;AAACC,EAAAA,OAAO,EAAE,SAAV;AAAqBC,EAAAA,MAAM,EAAE;AAA7B,CAAlB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,SADgB;AAEtBC,EAAAA,OAAO,EAAE,MAFa;AAGtBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,WAAT;AAAZ,GAHU;AAItBC,EAAAA,QAAQ,EAAE;AAJY,CAAxB;AAOA,MAAMC,QAAQ,GAAG;AAACC,EAAAA,QAAQ,EAAE,SAAX;AAAsBC,EAAAA,OAAO,EAAER;AAA/B,CAAjB;AAEA,MAAMS,MAAM,GAAG,GAAGA,MAAlB;AAEA,IAAIC,wBAAwB,GAAG,KAA/B;AAEA,eAAe,SAASC,QAAT,CAAkBC,OAAO,GAAG,EAA5B,EAAgC;AAC7C,MAAI;AAACC,IAAAA,cAAD;AAAiBN,IAAAA,QAAjB;AAA2BC,IAAAA,OAA3B;AAAoCM,IAAAA;AAApC,MAA6C,EAAC,GAAGR,QAAJ;AAAc,OAAGM;AAAjB,GAAjD;AACA,MAAIG,MAAJ,CAF6C,CAI7C;;AACA,MAAIH,OAAO,CAACI,SAAR,KAAsBC,SAA1B,EAAqC;AACnC,QAAI,CAACP,wBAAL,EAA+B;AAC7BA,MAAAA,wBAAwB,GAAG,IAA3B;AACAQ,MAAAA,OAAO,CAACC,IAAR,CACE,8GADF;AAGD;;AAEDZ,IAAAA,QAAQ,GAAGK,OAAO,CAACI,SAAnB;AACD;;AAED,MAAIT,QAAQ,KAAK,MAAjB,EAAyB;AACvBQ,IAAAA,MAAM,GAAGK,IAAT;AACD,GAFD,MAEO,IAAIb,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,OAA1C,EAAmD;AACxDQ,IAAAA,MAAM,GAAGM,MAAT;AACD,GAFM,MAEA;AACLN,IAAAA,MAAM,GAAGO,MAAT;;AAEA,QAAI,CAACT,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG;AAACU,QAAAA,UAAU,EAAE,MAAb;AAAqBC,QAAAA,QAAQ,EAAE,CAAC;AAAhC,OAAjB;AACD;AACF;;AAED,SAAQC,IAAD,IAAU9B,KAAK,CAAC8B,IAAD,EAAO,SAAP,EAAkBC,OAAlB,CAAtB;;AAEA,WAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,UAAM;AAACC,MAAAA;AAAD,QAASH,IAAf;AACA,UAAMI,EAAE,GAAGD,IAAI,IAAIA,IAAI,CAACE,WAAb,IAA4BF,IAAI,CAACE,WAAL,CAAiBD,EAAxD;;AAEA,QAAIA,EAAJ,EAAQ;AACN,aAAOhB,MAAM,CAACY,IAAD,EAAO,MAAMI,EAAb,EAAiBH,KAAjB,EAAwBC,MAAxB,CAAb;AACD;AACF;;AAED,WAASP,MAAT,CAAgBK,IAAhB,EAAsBM,GAAtB,EAA2B;AACzB,UAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAnB;AAEAC,IAAAA,IAAI,CAACJ,IAAL,GAAY;AACVE,MAAAA,WAAW,EAAEI,OAAO,CAACvB,cAAD,CADV;AAEVwB,MAAAA,SAAS,EAAEC,UAAU,CAAC9B,OAAD,EAAUmB,IAAV;AAFX,KAAZ;AAKAA,IAAAA,IAAI,CAACtB,QAAL,CAAcR,SAAS,CAACU,QAAD,CAAvB,EAAmC2B,IAAnC;AACD;;AAED,WAASb,MAAT,CAAgBM,IAAhB,EAAsBM,GAAtB,EAA2BL,KAA3B,EAAkCC,MAAlC,EAA0C;AACxC,UAAMK,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAnB;AACA,UAAMM,QAAQ,GAAGzB,KAAK,GAAG0B,UAAU,CAAC1B,KAAD,EAAQa,IAAR,CAAb,GAA6BV,SAAnD;AAEAiB,IAAAA,IAAI,CAACJ,IAAL,GAAY;AACVE,MAAAA,WAAW,EAAEI,OAAO,CAACvB,cAAD,CADV;AAEVwB,MAAAA,SAAS,EAAEC,UAAU,CAAC9B,OAAD,EAAUmB,IAAV;AAFX,KAAZ;AAKA,QAAIc,KAAK,GAAGlC,QAAQ,KAAK,QAAb,GAAwB,CAAC2B,IAAD,EAAOP,IAAP,CAAxB,GAAuC,CAACA,IAAD,EAAOO,IAAP,CAAnD;;AAEA,QAAIK,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAClC,QAAT,GAAoBoC,KAApB;AACAA,MAAAA,KAAK,GAAGF,QAAR;AACD;;AAED9B,IAAAA,MAAM,CAACiC,KAAP,CAAab,MAAM,CAACxB,QAApB,EAA8B,CAACuB,KAAD,EAAQ,CAAR,EAAWe,MAAX,CAAkBF,KAAlB,CAA9B;AAEA,WAAO,CAAC9C,KAAK,CAACiD,IAAP,EAAahB,KAAK,GAAGa,KAAK,CAACI,MAA3B,CAAP;AACD;;AAED,WAASzB,IAAT,CAAcO,IAAd,EAAoBM,GAApB,EAAyB;AACvB,UAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,EAAMN,IAAI,CAACtB,QAAX,CAAnB;AAEA6B,IAAAA,IAAI,CAACJ,IAAL,GAAY;AAACE,MAAAA,WAAW,EAAEI,OAAO,CAACvB,cAAD;AAArB,KAAZ;AAEAc,IAAAA,IAAI,CAACtB,QAAL,GAAgB,CAAC6B,IAAD,CAAhB;AACD;;AAED,WAASE,OAAT,CAAiBU,KAAjB,EAAwB;AACtB,WAAOC,UAAU,CAAC,EAAD,EAAKD,KAAL,CAAjB;AACD;;AAED,WAASE,MAAT,CAAgBF,KAAhB,EAAuBnB,IAAvB,EAA6B;AAC3B,WAAO,OAAOmB,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACnB,IAAD,CAAnC,GAA4CmB,KAAnD;AACD;;AAED,WAASR,UAAT,CAAoBQ,KAApB,EAA2BnB,IAA3B,EAAiC;AAC/B,QAAItB,QAAQ,GAAG2C,MAAM,CAACF,KAAD,EAAQnB,IAAR,CAArB;AAEAtB,IAAAA,QAAQ,GAAG4C,KAAK,CAACC,OAAN,CAAc7C,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAhD;AAEA,WAAO,OAAOyC,KAAP,KAAiB,UAAjB,GAA8BzC,QAA9B,GAAyC0C,UAAU,CAAC,EAAD,EAAK1C,QAAL,CAA1D;AACD;;AAED,WAASmC,UAAT,CAAoBM,KAApB,EAA2BnB,IAA3B,EAAiC;AAC/B,UAAMY,QAAQ,GAAGS,MAAM,CAACF,KAAD,EAAQnB,IAAR,CAAvB;AACA,UAAMwB,KAAK,GAAGZ,QAAQ,CAACrC,OAAvB;AACA,UAAM8B,WAAW,GAAGO,QAAQ,CAACpC,UAA7B;AAEA,WAAO;AACLF,MAAAA,IAAI,EAAE,eADD;AAEL6B,MAAAA,IAAI,EAAE;AACJqB,QAAAA,KADI;AAEJnB,QAAAA,WAAW,EACT,OAAOc,KAAP,KAAiB,UAAjB,GACIC,UAAU,CAAC,EAAD,EAAKf,WAAL,CADd,GAEIA;AALF,OAFD;AASL3B,MAAAA,QAAQ,EAAE;AATL,KAAP;AAWD;;AAED,WAAS8B,MAAT,CAAgBF,GAAhB,EAAqB5B,QAArB,EAA+B;AAC7B,WAAO;AACLJ,MAAAA,IAAI,EAAE,MADD;AAELgC,MAAAA,GAFK;AAGLmB,MAAAA,KAAK,EAAE,IAHF;AAIL/C,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAJjB,KAAP;AAMD;;AAED,WAAS0C,UAAT,CAAoBM,IAApB,EAA0BP,KAA1B,EAAiC;AAC/B,WAAOlD,MAAM,CAAC,IAAD,EAAOyD,IAAP,EAAaP,KAAb,CAAb;AACD;AACF","sourcesContent":["import visit from 'unist-util-visit'\nimport extend from 'extend'\n\nconst behaviors = {prepend: 'unshift', append: 'push'}\n\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\nconst defaults = {behavior: 'prepend', content: contentDefaults}\n\nconst splice = [].splice\n\nlet deprecationWarningIssued = false\n\nexport default function attacher(options = {}) {\n  let {linkProperties, behavior, content, group} = {...defaults, ...options}\n  let method\n\n  // NOTE: Remove in next major version\n  if (options.behaviour !== undefined) {\n    if (!deprecationWarningIssued) {\n      deprecationWarningIssued = true\n      console.warn(\n        '[remark-autolink-headings] Deprecation Warning: `behaviour` is a nonstandard option. Use `behavior` instead.'\n      )\n    }\n\n    behavior = options.behaviour\n  }\n\n  if (behavior === 'wrap') {\n    method = wrap\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around\n  } else {\n    method = inject\n\n    if (!linkProperties) {\n      linkProperties = {ariaHidden: 'true', tabIndex: -1}\n    }\n  }\n\n  return (tree) => visit(tree, 'heading', visitor)\n\n  function visitor(node, index, parent) {\n    const {data} = node\n    const id = data && data.hProperties && data.hProperties.id\n\n    if (id) {\n      return method(node, '#' + id, index, parent)\n    }\n  }\n\n  function inject(node, url) {\n    const link = create(url)\n\n    link.data = {\n      hProperties: toProps(linkProperties),\n      hChildren: toChildren(content, node)\n    }\n\n    node.children[behaviors[behavior]](link)\n  }\n\n  function around(node, url, index, parent) {\n    const link = create(url)\n    const grouping = group ? toGrouping(group, node) : undefined\n\n    link.data = {\n      hProperties: toProps(linkProperties),\n      hChildren: toChildren(content, node)\n    }\n\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (grouping) {\n      grouping.children = nodes\n      nodes = grouping\n    }\n\n    splice.apply(parent.children, [index, 1].concat(nodes))\n\n    return [visit.SKIP, index + nodes.length]\n  }\n\n  function wrap(node, url) {\n    const link = create(url, node.children)\n\n    link.data = {hProperties: toProps(linkProperties)}\n\n    node.children = [link]\n  }\n\n  function toProps(value) {\n    return deepAssign({}, value)\n  }\n\n  function toNode(value, node) {\n    return typeof value === 'function' ? value(node) : value\n  }\n\n  function toChildren(value, node) {\n    let children = toNode(value, node)\n\n    children = Array.isArray(children) ? children : [children]\n\n    return typeof value === 'function' ? children : deepAssign([], children)\n  }\n\n  function toGrouping(value, node) {\n    const grouping = toNode(value, node)\n    const hName = grouping.tagName\n    const hProperties = grouping.properties\n\n    return {\n      type: 'heading-group',\n      data: {\n        hName,\n        hProperties:\n          typeof value === 'function'\n            ? deepAssign({}, hProperties)\n            : hProperties\n      },\n      children: []\n    }\n  }\n\n  function create(url, children) {\n    return {\n      type: 'link',\n      url,\n      title: null,\n      children: children || []\n    }\n  }\n\n  function deepAssign(base, value) {\n    return extend(true, base, value)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}