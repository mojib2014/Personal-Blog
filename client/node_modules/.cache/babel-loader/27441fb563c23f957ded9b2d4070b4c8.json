{"ast":null,"code":"module.exports = formatPretty;\n\nvar toHexadecimal = require('./to-hexadecimal');\n\nvar toDecimal = require('./to-decimal');\n\nvar toNamed = require('./to-named'); // Encode `character` according to `options`.\n\n\nfunction formatPretty(code, next, options) {\n  var named;\n  var numeric;\n  var decimal;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(code, next, options.omitOptionalSemicolons, options.attribute);\n  }\n\n  if (options.useShortestReferences || !named) {\n    numeric = toHexadecimal(code, next, options.omitOptionalSemicolons); // Use the shortest numeric reference when requested.\n    // A simple algorithm would use decimal for all code points under 100, as\n    // those are shorter than hexadecimal:\n    //\n    // * `&#99;` vs `&#x63;` (decimal shorter)\n    // * `&#100;` vs `&#x64;` (equal)\n    //\n    // However, because we take `next` into consideration when `omit` is used,\n    // And it would be possible that decimals are shorter on bigger values as\n    // well if `next` is hexadecimal but not decimal, we instead compare both.\n\n    if (options.useShortestReferences) {\n      decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n      if (decimal.length < numeric.length) {\n        numeric = decimal;\n      }\n    }\n  }\n\n  return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;\n}","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/node_modules/stringify-entities/lib/util/format-smart.js"],"names":["module","exports","formatPretty","toHexadecimal","require","toDecimal","toNamed","code","next","options","named","numeric","decimal","useNamedReferences","useShortestReferences","omitOptionalSemicolons","attribute","length"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB,C,CAEA;;;AACA,SAASF,YAAT,CAAsBK,IAAtB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;AACzC,MAAIC,KAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ;;AAEA,MAAIH,OAAO,CAACI,kBAAR,IAA8BJ,OAAO,CAACK,qBAA1C,EAAiE;AAC/DJ,IAAAA,KAAK,GAAGJ,OAAO,CACbC,IADa,EAEbC,IAFa,EAGbC,OAAO,CAACM,sBAHK,EAIbN,OAAO,CAACO,SAJK,CAAf;AAMD;;AAED,MAAIP,OAAO,CAACK,qBAAR,IAAiC,CAACJ,KAAtC,EAA6C;AAC3CC,IAAAA,OAAO,GAAGR,aAAa,CAACI,IAAD,EAAOC,IAAP,EAAaC,OAAO,CAACM,sBAArB,CAAvB,CAD2C,CAG3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIN,OAAO,CAACK,qBAAZ,EAAmC;AACjCF,MAAAA,OAAO,GAAGP,SAAS,CAACE,IAAD,EAAOC,IAAP,EAAaC,OAAO,CAACM,sBAArB,CAAnB;;AAEA,UAAIH,OAAO,CAACK,MAAR,GAAiBN,OAAO,CAACM,MAA7B,EAAqC;AACnCN,QAAAA,OAAO,GAAGC,OAAV;AACD;AACF;AACF;;AAED,SAAOF,KAAK,KACT,CAACD,OAAO,CAACK,qBAAT,IAAkCJ,KAAK,CAACO,MAAN,GAAeN,OAAO,CAACM,MADhD,CAAL,GAEHP,KAFG,GAGHC,OAHJ;AAID","sourcesContent":["module.exports = formatPretty\n\nvar toHexadecimal = require('./to-hexadecimal')\nvar toDecimal = require('./to-decimal')\nvar toNamed = require('./to-named')\n\n// Encode `character` according to `options`.\nfunction formatPretty(code, next, options) {\n  var named\n  var numeric\n  var decimal\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  if (options.useShortestReferences || !named) {\n    numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n\n    // Use the shortest numeric reference when requested.\n    // A simple algorithm would use decimal for all code points under 100, as\n    // those are shorter than hexadecimal:\n    //\n    // * `&#99;` vs `&#x63;` (decimal shorter)\n    // * `&#100;` vs `&#x64;` (equal)\n    //\n    // However, because we take `next` into consideration when `omit` is used,\n    // And it would be possible that decimals are shorter on bigger values as\n    // well if `next` is hexadecimal but not decimal, we instead compare both.\n    if (options.useShortestReferences) {\n      decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n      if (decimal.length < numeric.length) {\n        numeric = decimal\n      }\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n"]},"metadata":{},"sourceType":"script"}