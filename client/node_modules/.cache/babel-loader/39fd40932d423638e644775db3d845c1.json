{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport \"../index.less\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500\n    }\n  }\n}));\nexport default function PostForm() {\n  _s();\n\n  const {\n    addPost,\n    err,\n    loading,\n    success\n  } = useContext(PostContext); // const [error, setError] = useState(null);\n\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const classes = useStyles(); // const handleClick = () => {\n  //   setOpen(true);\n  // };\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") return setOpen(false);\n  // };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(5).max(255).required().label(\"Title\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      title: \"\"\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      addPost({ ...values,\n        body: value\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"title\",\n        type: \"text\",\n        name: \"title\",\n        label: \"Title\",\n        value: formik.values.title,\n        onChange: formik.handleChange,\n        error: formik.touched.title && Boolean(formik.errors.title),\n        helperText: formik.touched.title && formik.errors.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: value,\n        onChange: setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SnackBar, {\n      message: error,\n      severity: error ? \"error\" : \"success\",\n      success: success,\n      open: open,\n      onClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"2szgsMM0m0eBO9b5CsuR+C9a4xo=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx"],"names":["React","useState","useContext","useFormik","Yup","MDEditor","TextField","Button","makeStyles","SnackBar","PostContext","useStyles","theme","root","margin","spacing","width","PostForm","addPost","err","loading","success","open","setOpen","value","setValue","classes","schema","object","shape","title","string","min","max","required","label","formik","initialValues","validationSchema","onSubmit","values","body","handleSubmit","handleChange","touched","Boolean","errors","error","handleClose"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport \"../index.less\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500,\n    },\n  },\n}));\n\nexport default function PostForm() {\n  const { addPost, err, loading, success } = useContext(PostContext);\n  // const [error, setError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const classes = useStyles();\n\n  // const handleClick = () => {\n  //   setOpen(true);\n  // };\n\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") return setOpen(false);\n  // };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(5).max(255).required().label(\"Title\"),\n  });\n\n  const formik = useFormik({\n    initialValues: { title: \"\" },\n    validationSchema: schema,\n    onSubmit: (values) => {\n      addPost({ ...values, body: value });\n    },\n  });\n\n  return (\n    <div className=\"content\">\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id=\"title\"\n          type=\"text\"\n          name=\"title\"\n          label=\"Title\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n          error={formik.touched.title && Boolean(formik.errors.title)}\n          helperText={formik.touched.title && formik.errors.title}\n        />\n        <MDEditor value={value} onChange={setValue} />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Submit\n        </Button>\n      </form>\n      <SnackBar\n        message={error}\n        severity={error ? \"error\" : \"success\"}\n        success={success}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}