{"ast":null,"code":"import http from \"./httpService\";\n\nconst getAllPosts = async () => {\n  try {\n    return await http.get(\"/posts\");\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst getPostById = async post_id => {\n  try {\n    return await http.get(\"/posts/post\", {\n      params: post_id\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst getAuthorPosts = async author_id => {\n  console.log(\"author id post service\");\n\n  try {\n    return await http.get(`/author/posts/${author_id}`);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst createPost = async post => {\n  try {\n    return await http.post(\"/posts/new\", post);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst updatePostById = async post => {\n  try {\n    return await http.put(\"/posts/post/update\", post);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst deletePostComments = async post_id => {\n  try {\n    return await http.delete(\"/posts/post/comments/delete\", {\n      params: post_id\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst deletePost = async post_id => {\n  try {\n    return await http.delete(\"/posts/post/delete\", {\n      params: post_id\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst likePost = async (user_id, post_id) => {\n  try {\n    return await http.put(\"/posts/post/like\", {\n      user_id,\n      post_id\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst disLikePost = async (user_id, post_id) => {\n  try {\n    return await http.put(\"/posts/post/dislike\", {\n      user_id,\n      post_id\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst postService = {\n  createPost,\n  getAllPosts,\n  getPostById,\n  updatePostById,\n  deletePostComments,\n  deletePost,\n  likePost,\n  disLikePost,\n  getAuthorPosts\n};\nexport default postService;","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/services/postsService.js"],"names":["http","getAllPosts","get","err","getPostById","post_id","params","getAuthorPosts","author_id","console","log","createPost","post","updatePostById","put","deletePostComments","delete","deletePost","likePost","user_id","disLikePost","postService"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;;AAEA,MAAMC,WAAW,GAAG,YAAY;AAC9B,MAAI;AACF,WAAO,MAAMD,IAAI,CAACE,GAAL,CAAS,QAAT,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMC,WAAW,GAAG,MAAOC,OAAP,IAAmB;AACrC,MAAI;AACF,WAAO,MAAML,IAAI,CAACE,GAAL,CAAS,aAAT,EAAwB;AAAEI,MAAAA,MAAM,EAAED;AAAV,KAAxB,CAAb;AACD,GAFD,CAEE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMI,cAAc,GAAG,MAAOC,SAAP,IAAqB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,MAAI;AACF,WAAO,MAAMV,IAAI,CAACE,GAAL,CAAU,iBAAgBM,SAAU,EAApC,CAAb;AACD,GAFD,CAEE,OAAOL,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAPD;;AASA,MAAMQ,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjC,MAAI;AACF,WAAO,MAAMZ,IAAI,CAACY,IAAL,CAAU,YAAV,EAAwBA,IAAxB,CAAb;AACD,GAFD,CAEE,OAAOT,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMU,cAAc,GAAG,MAAOD,IAAP,IAAgB;AACrC,MAAI;AACF,WAAO,MAAMZ,IAAI,CAACc,GAAL,CAAS,oBAAT,EAA+BF,IAA/B,CAAb;AACD,GAFD,CAEE,OAAOT,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMY,kBAAkB,GAAG,MAAOV,OAAP,IAAmB;AAC5C,MAAI;AACF,WAAO,MAAML,IAAI,CAACgB,MAAL,CAAY,6BAAZ,EAA2C;AACtDV,MAAAA,MAAM,EAAED;AAD8C,KAA3C,CAAb;AAGD,GAJD,CAIE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CARD;;AAUA,MAAMc,UAAU,GAAG,MAAOZ,OAAP,IAAmB;AACpC,MAAI;AACF,WAAO,MAAML,IAAI,CAACgB,MAAL,CAAY,oBAAZ,EAAkC;AAAEV,MAAAA,MAAM,EAAED;AAAV,KAAlC,CAAb;AACD,GAFD,CAEE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMe,QAAQ,GAAG,OAAOC,OAAP,EAAgBd,OAAhB,KAA4B;AAC3C,MAAI;AACF,WAAO,MAAML,IAAI,CAACc,GAAL,CAAS,kBAAT,EAA6B;AAAEK,MAAAA,OAAF;AAAWd,MAAAA;AAAX,KAA7B,CAAb;AACD,GAFD,CAEE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMiB,WAAW,GAAG,OAAOD,OAAP,EAAgBd,OAAhB,KAA4B;AAC9C,MAAI;AACF,WAAO,MAAML,IAAI,CAACc,GAAL,CAAS,qBAAT,EAAgC;AAAEK,MAAAA,OAAF;AAAWd,MAAAA;AAAX,KAAhC,CAAb;AACD,GAFD,CAEE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAND;;AAQA,MAAMkB,WAAW,GAAG;AAClBV,EAAAA,UADkB;AAElBV,EAAAA,WAFkB;AAGlBG,EAAAA,WAHkB;AAIlBS,EAAAA,cAJkB;AAKlBE,EAAAA,kBALkB;AAMlBE,EAAAA,UANkB;AAOlBC,EAAAA,QAPkB;AAQlBE,EAAAA,WARkB;AASlBb,EAAAA;AATkB,CAApB;AAYA,eAAec,WAAf","sourcesContent":["import http from \"./httpService\";\n\nconst getAllPosts = async () => {\n  try {\n    return await http.get(\"/posts\");\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst getPostById = async (post_id) => {\n  try {\n    return await http.get(\"/posts/post\", { params: post_id });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst getAuthorPosts = async (author_id) => {\n  console.log(\"author id post service\");\n  try {\n    return await http.get(`/author/posts/${author_id}`);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst createPost = async (post) => {\n  try {\n    return await http.post(\"/posts/new\", post);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst updatePostById = async (post) => {\n  try {\n    return await http.put(\"/posts/post/update\", post);\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst deletePostComments = async (post_id) => {\n  try {\n    return await http.delete(\"/posts/post/comments/delete\", {\n      params: post_id,\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst deletePost = async (post_id) => {\n  try {\n    return await http.delete(\"/posts/post/delete\", { params: post_id });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst likePost = async (user_id, post_id) => {\n  try {\n    return await http.put(\"/posts/post/like\", { user_id, post_id });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst disLikePost = async (user_id, post_id) => {\n  try {\n    return await http.put(\"/posts/post/dislike\", { user_id, post_id });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst postService = {\n  createPost,\n  getAllPosts,\n  getPostById,\n  updatePostById,\n  deletePostComments,\n  deletePost,\n  likePost,\n  disLikePost,\n  getAuthorPosts,\n};\n\nexport default postService;\n"]},"metadata":{},"sourceType":"module"}