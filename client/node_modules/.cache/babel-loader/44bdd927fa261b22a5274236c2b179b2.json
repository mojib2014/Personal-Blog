{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar html = require('property-information/html');\n\nvar svg = require('property-information/svg');\n\nvar find = require('property-information/find');\n\nvar toH = require('hast-to-hyperscript');\n\nvar ns = require('web-namespaces');\n\nvar zwitch = require('zwitch');\n\nmodule.exports = transform;\nvar ignoredSpaces = ['svg', 'html'];\nvar one = zwitch('type');\none.handlers.root = root;\none.handlers.element = element;\none.handlers.text = text;\none.handlers.comment = comment;\none.handlers.doctype = doctype; // Transform a tree from hast to Parse5â€™s AST.\n\nfunction transform(tree, space) {\n  return one(tree, space === 'svg' ? svg : html);\n}\n\nfunction root(node, schema) {\n  var data = node.data || {};\n  var mode = data.quirksMode ? 'quirks' : 'no-quirks';\n  return patch(node, {\n    nodeName: '#document',\n    mode: mode\n  }, schema);\n}\n\nfunction fragment(node, schema) {\n  return patch(node, {\n    nodeName: '#document-fragment'\n  }, schema);\n}\n\nfunction doctype(node, schema) {\n  return patch(node, {\n    nodeName: '#documentType',\n    name: node.name,\n    publicId: node.public || '',\n    systemId: node.system || ''\n  }, schema);\n}\n\nfunction text(node, schema) {\n  return patch(node, {\n    nodeName: '#text',\n    value: node.value\n  }, schema);\n}\n\nfunction comment(node, schema) {\n  return patch(node, {\n    nodeName: '#comment',\n    data: node.value\n  }, schema);\n}\n\nfunction element(node, schema) {\n  var space = schema.space;\n  var shallow = xtend(node, {\n    children: []\n  });\n  return toH(h, shallow, {\n    space: space\n  });\n\n  function h(name, attrs) {\n    var values = [];\n    var p5;\n    var attr;\n    var value;\n    var key;\n    var info;\n    var pos;\n\n    for (key in attrs) {\n      info = find(schema, key);\n      attr = attrs[key];\n\n      if (attr === false || info.boolean && !attr) {\n        continue;\n      }\n\n      value = {\n        name: key,\n        value: attr === true ? '' : String(attr)\n      };\n\n      if (info.space && ignoredSpaces.indexOf(info.space) === -1) {\n        pos = key.indexOf(':');\n\n        if (pos === -1) {\n          value.prefix = '';\n        } else {\n          value.name = key.slice(pos + 1);\n          value.prefix = key.slice(0, pos);\n        }\n\n        value.namespace = ns[info.space];\n      }\n\n      values.push(value);\n    }\n\n    p5 = patch(node, {\n      nodeName: name,\n      tagName: name,\n      attrs: values\n    }, schema);\n\n    if (name === 'template') {\n      p5.content = fragment(shallow.content, schema);\n    }\n\n    return p5;\n  }\n} // Patch specific properties.\n\n\nfunction patch(node, p5, parentSchema) {\n  var schema = parentSchema;\n  var position = node.position;\n  var children = node.children;\n  var childNodes = [];\n  var length = children ? children.length : 0;\n  var index = -1;\n  var child;\n\n  if (node.type === 'element') {\n    if (schema.space === 'html' && node.tagName === 'svg') {\n      schema = svg;\n    }\n\n    p5.namespaceURI = ns[schema.space];\n  }\n\n  while (++index < length) {\n    child = one(children[index], schema);\n    child.parentNode = p5;\n    childNodes[index] = child;\n  }\n\n  if (node.type === 'element' || node.type === 'root') {\n    p5.childNodes = childNodes;\n  }\n\n  if (position && position.start && position.end) {\n    p5.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    };\n  }\n\n  return p5;\n}","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/node_modules/hast-util-to-parse5/index.js"],"names":["xtend","require","html","svg","find","toH","ns","zwitch","module","exports","transform","ignoredSpaces","one","handlers","root","element","text","comment","doctype","tree","space","node","schema","data","mode","quirksMode","patch","nodeName","fragment","name","publicId","public","systemId","system","value","shallow","children","h","attrs","values","p5","attr","key","info","pos","boolean","String","indexOf","prefix","slice","namespace","push","tagName","content","parentSchema","position","childNodes","length","index","child","type","namespaceURI","parentNode","start","end","sourceCodeLocation","startLine","line","startCol","column","startOffset","offset","endLine","endCol","endOffset"],"mappings":"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","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar html = require('property-information/html')\nvar svg = require('property-information/svg')\nvar find = require('property-information/find')\nvar toH = require('hast-to-hyperscript')\nvar ns = require('web-namespaces')\nvar zwitch = require('zwitch')\n\nmodule.exports = transform\n\nvar ignoredSpaces = ['svg', 'html']\n\nvar one = zwitch('type')\n\none.handlers.root = root\none.handlers.element = element\none.handlers.text = text\none.handlers.comment = comment\none.handlers.doctype = doctype\n\n// Transform a tree from hast to Parse5â€™s AST.\nfunction transform(tree, space) {\n  return one(tree, space === 'svg' ? svg : html)\n}\n\nfunction root(node, schema) {\n  var data = node.data || {}\n  var mode = data.quirksMode ? 'quirks' : 'no-quirks'\n\n  return patch(node, {nodeName: '#document', mode: mode}, schema)\n}\n\nfunction fragment(node, schema) {\n  return patch(node, {nodeName: '#document-fragment'}, schema)\n}\n\nfunction doctype(node, schema) {\n  return patch(\n    node,\n    {\n      nodeName: '#documentType',\n      name: node.name,\n      publicId: node.public || '',\n      systemId: node.system || ''\n    },\n    schema\n  )\n}\n\nfunction text(node, schema) {\n  return patch(node, {nodeName: '#text', value: node.value}, schema)\n}\n\nfunction comment(node, schema) {\n  return patch(node, {nodeName: '#comment', data: node.value}, schema)\n}\n\nfunction element(node, schema) {\n  var space = schema.space\n  var shallow = xtend(node, {children: []})\n\n  return toH(h, shallow, {space: space})\n\n  function h(name, attrs) {\n    var values = []\n    var p5\n    var attr\n    var value\n    var key\n    var info\n    var pos\n\n    for (key in attrs) {\n      info = find(schema, key)\n      attr = attrs[key]\n\n      if (attr === false || (info.boolean && !attr)) {\n        continue\n      }\n\n      value = {name: key, value: attr === true ? '' : String(attr)}\n\n      if (info.space && ignoredSpaces.indexOf(info.space) === -1) {\n        pos = key.indexOf(':')\n\n        if (pos === -1) {\n          value.prefix = ''\n        } else {\n          value.name = key.slice(pos + 1)\n          value.prefix = key.slice(0, pos)\n        }\n\n        value.namespace = ns[info.space]\n      }\n\n      values.push(value)\n    }\n\n    p5 = patch(node, {nodeName: name, tagName: name, attrs: values}, schema)\n\n    if (name === 'template') {\n      p5.content = fragment(shallow.content, schema)\n    }\n\n    return p5\n  }\n}\n\n// Patch specific properties.\nfunction patch(node, p5, parentSchema) {\n  var schema = parentSchema\n  var position = node.position\n  var children = node.children\n  var childNodes = []\n  var length = children ? children.length : 0\n  var index = -1\n  var child\n\n  if (node.type === 'element') {\n    if (schema.space === 'html' && node.tagName === 'svg') {\n      schema = svg\n    }\n\n    p5.namespaceURI = ns[schema.space]\n  }\n\n  while (++index < length) {\n    child = one(children[index], schema)\n    child.parentNode = p5\n    childNodes[index] = child\n  }\n\n  if (node.type === 'element' || node.type === 'root') {\n    p5.childNodes = childNodes\n  }\n\n  if (position && position.start && position.end) {\n    p5.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n\n  return p5\n}\n"]},"metadata":{},"sourceType":"script"}