{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/store/providers/PostProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { initialState, postReducer } from \"../reducers/postReducer\";\nimport PostContext from \"../../context/postContext\";\nimport postService from \"../../services/postsService\";\nimport actions from \"../actions/actions\";\nimport auth from \"../../services/authService\";\nimport useSnackState from \"../../hooks/useSnackState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(postReducer, initialState);\n  const [handleOpen] = useSnackState();\n\n  const addPost = async post => {\n    try {\n      dispatch(actions.loading());\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(actions.addPost(data));\n    } catch (err) {\n      dispatch(actions.error(err.response));\n    }\n  };\n\n  const getPosts = async () => {\n    try {\n      dispatch(actions.loading());\n      const {\n        data: posts\n      } = await postService.getAllPosts();\n      dispatch(actions.getPosts(posts));\n      return handleOpen();\n    } catch (err) {\n      handleOpen();\n      dispatch(actions.error(err.response));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: state.posts,\n      loading: state.loading,\n      err: state.error,\n      success: state.success,\n      addPost,\n      getPosts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostProvider, \"Tq5q1SnlJ1tzEGQKGDbScCA4bKQ=\", false, function () {\n  return [useSnackState];\n});\n\n_c = PostProvider;\nexport default PostProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/store/providers/PostProvider.js"],"names":["React","useReducer","initialState","postReducer","PostContext","postService","actions","auth","useSnackState","PostProvider","children","state","dispatch","handleOpen","addPost","post","loading","user","getCurrentUser","author","id","data","createPost","err","error","response","getPosts","posts","getAllPosts","success"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,yBAA1C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACE,WAAD,EAAcD,YAAd,CAApC;AACA,QAAM,CAACW,UAAD,IAAeL,aAAa,EAAlC;;AAEA,QAAMM,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9B,QAAI;AACFH,MAAAA,QAAQ,CAACN,OAAO,CAACU,OAAR,EAAD,CAAR;AAEA,YAAMC,IAAI,GAAG,MAAMV,IAAI,CAACW,cAAL,EAAnB;AACAH,MAAAA,IAAI,CAACI,MAAL,GAAcF,IAAI,CAACG,EAAnB;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMhB,WAAW,CAACiB,UAAZ,CAAuBP,IAAvB,CAAvB;AAEAH,MAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAR,CAAgBO,IAAhB,CAAD,CAAR;AACD,KATD,CASE,OAAOE,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAACN,OAAO,CAACkB,KAAR,CAAcD,GAAG,CAACE,QAAlB,CAAD,CAAR;AACD;AACF,GAbD;;AAeA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACFd,MAAAA,QAAQ,CAACN,OAAO,CAACU,OAAR,EAAD,CAAR;AAEA,YAAM;AAAEK,QAAAA,IAAI,EAAEM;AAAR,UAAkB,MAAMtB,WAAW,CAACuB,WAAZ,EAA9B;AAEAhB,MAAAA,QAAQ,CAACN,OAAO,CAACoB,QAAR,CAAiBC,KAAjB,CAAD,CAAR;AACA,aAAOd,UAAU,EAAjB;AACD,KAPD,CAOE,OAAOU,GAAP,EAAY;AACZV,MAAAA,UAAU;AACVD,MAAAA,QAAQ,CAACN,OAAO,CAACkB,KAAR,CAAcD,GAAG,CAACE,QAAlB,CAAD,CAAR;AACD;AACF,GAZD;;AAcA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,KAAK,EAAEhB,KAAK,CAACgB,KADR;AAELX,MAAAA,OAAO,EAAEL,KAAK,CAACK,OAFV;AAGLO,MAAAA,GAAG,EAAEZ,KAAK,CAACa,KAHN;AAILK,MAAAA,OAAO,EAAElB,KAAK,CAACkB,OAJV;AAKLf,MAAAA,OALK;AAMLY,MAAAA;AANK,KADT;AAAA,cAUGhB;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA/CD;;GAAMD,Y;UAEiBD,a;;;KAFjBC,Y;AAiDN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport { initialState, postReducer } from \"../reducers/postReducer\";\nimport PostContext from \"../../context/postContext\";\nimport postService from \"../../services/postsService\";\nimport actions from \"../actions/actions\";\nimport auth from \"../../services/authService\";\nimport useSnackState from \"../../hooks/useSnackState\";\n\nconst PostProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(postReducer, initialState);\n  const [handleOpen] = useSnackState();\n\n  const addPost = async (post) => {\n    try {\n      dispatch(actions.loading());\n\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(actions.addPost(data));\n    } catch (err) {\n      dispatch(actions.error(err.response));\n    }\n  };\n\n  const getPosts = async () => {\n    try {\n      dispatch(actions.loading());\n\n      const { data: posts } = await postService.getAllPosts();\n\n      dispatch(actions.getPosts(posts));\n      return handleOpen();\n    } catch (err) {\n      handleOpen();\n      dispatch(actions.error(err.response));\n    }\n  };\n\n  return (\n    <PostContext.Provider\n      value={{\n        posts: state.posts,\n        loading: state.loading,\n        err: state.error,\n        success: state.success,\n        addPost,\n        getPosts,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostProvider;\n"]},"metadata":{},"sourceType":"module"}