{"ast":null,"code":"import insertText from '../../utils/InsertTextAtPosition';\nimport { TextAreaTextApi } from '../../commands';\nimport { insertBeforeEachLine } from '../../commands/list';\n/**\n * - `13` - `Enter`\n * - `9` - `Tab`\n */\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexport default function handleKeyDown(e) {\n  var tabSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var target = e.target;\n  var starVal = target.value.substr(0, target.selectionStart);\n  var valArr = starVal.split('\\n');\n  var currentLineStr = valArr[valArr.length - 1];\n  var textArea = new TextAreaTextApi(target);\n  /**\n   * `9` - `Tab`\n   */\n\n  if (e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    var space = new Array(tabSize + 1).join('  ');\n\n    if (target.selectionStart !== target.selectionEnd) {\n      var _star = target.value.substring(0, target.selectionStart).split('\\n');\n\n      var _end = target.value.substring(0, target.selectionEnd).split('\\n');\n\n      var modifiedTextLine = [];\n\n      _end.forEach(function (item, idx) {\n        if (item !== _star[idx]) {\n          modifiedTextLine.push(item);\n        }\n      });\n\n      var modifiedText = modifiedTextLine.join('\\n');\n      var oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);\n      var newStarNum = target.value.substring(0, target.selectionStart).length;\n      textArea.setSelectionRange({\n        start: target.value.indexOf(modifiedText),\n        end: target.selectionEnd\n      });\n      var modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);\n      var text = modifiedTextObj.modifiedText;\n\n      if (e.shiftKey) {\n        text = text.split('\\n').map(function (item) {\n          return item.replace(new RegExp(\"^\".concat(space)), '');\n        }).join('\\n');\n      }\n\n      textArea.replaceSelection(text);\n      var startTabSize = e.shiftKey ? -tabSize : tabSize;\n      var endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;\n      textArea.setSelectionRange({\n        start: newStarNum + startTabSize,\n        end: newStarNum + oldSelectText.length + endTabSize\n      });\n    } else {\n      return insertText(target, space);\n    }\n  } else if (e.code && e.code.toLowerCase() === 'enter' && (/^(-|\\*)\\s/.test(currentLineStr) || /^\\d+.\\s/.test(currentLineStr))) {\n    /**\n     * `13` - `Enter`\n     */\n    stopPropagation(e);\n    var startStr = '\\n- ';\n\n    if (currentLineStr.startsWith('*')) {\n      startStr = '\\n* ';\n    }\n\n    if (/^\\d+.\\s/.test(currentLineStr)) {\n      startStr = \"\\n\".concat(parseInt(currentLineStr) + 1, \". \");\n    }\n\n    return insertText(target, startStr);\n  }\n}","map":{"version":3,"sources":["../../../../src/components/TextArea/handleKeyDown.tsx"],"names":["e","tabSize","target","starVal","valArr","currentLineStr","textArea","stopPropagation","space","_star","_end","modifiedTextLine","item","modifiedText","oldSelectText","newStarNum","start","end","selectionEnd","modifiedTextObj","insertBeforeEachLine","text","startTabSize","endTabSize","insertText","startStr","parseInt"],"mappings":"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","sourcesContent":["import insertText from '../../utils/InsertTextAtPosition';\nimport { TextAreaTextApi } from '../../commands';\nimport { insertBeforeEachLine } from '../../commands/list';\n\n/**\n * - `13` - `Enter`\n * - `9` - `Tab`\n */\nfunction stopPropagation(e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexport default function handleKeyDown(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n  tabSize: number = 2,\n) {\n  const target = e.target as HTMLTextAreaElement;\n  const starVal = target.value.substr(0, target.selectionStart);\n  const valArr = starVal.split('\\n');\n  const currentLineStr = valArr[valArr.length - 1];\n  const textArea = new TextAreaTextApi(target);\n  /**\n   * `9` - `Tab`\n   */\n  if (e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    const space = new Array(tabSize + 1).join('  ');\n    if (target.selectionStart !== target.selectionEnd) {\n      const _star = target.value.substring(0, target.selectionStart).split('\\n');\n      const _end = target.value.substring(0, target.selectionEnd).split('\\n');\n      const modifiedTextLine: string[] = [];\n      _end.forEach((item, idx) => {\n        if (item !== _star[idx]) {\n          modifiedTextLine.push(item);\n        }\n      });\n      const modifiedText = modifiedTextLine.join('\\n');\n      const oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);\n      const newStarNum = target.value.substring(0, target.selectionStart).length;\n\n      textArea.setSelectionRange({\n        start: target.value.indexOf(modifiedText),\n        end: target.selectionEnd,\n      });\n\n      const modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);\n\n      let text = modifiedTextObj.modifiedText;\n      if (e.shiftKey) {\n        text = text\n          .split('\\n')\n          .map((item) => item.replace(new RegExp(`^${space}`), ''))\n          .join('\\n');\n      }\n      textArea.replaceSelection(text);\n\n      let startTabSize = e.shiftKey ? -tabSize : tabSize;\n      let endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;\n\n      textArea.setSelectionRange({\n        start: newStarNum + startTabSize,\n        end: newStarNum + oldSelectText.length + endTabSize,\n      });\n    } else {\n      return insertText(target, space);\n    }\n  } else if (\n    e.code &&\n    e.code.toLowerCase() === 'enter' &&\n    (/^(-|\\*)\\s/.test(currentLineStr) || /^\\d+.\\s/.test(currentLineStr))\n  ) {\n    /**\n     * `13` - `Enter`\n     */\n    stopPropagation(e);\n    let startStr = '\\n- ';\n    if (currentLineStr.startsWith('*')) {\n      startStr = '\\n* ';\n    }\n    if (/^\\d+.\\s/.test(currentLineStr)) {\n      startStr = `\\n${parseInt(currentLineStr) + 1}. `;\n    }\n    return insertText(target, startStr);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}