{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport postService from \"../services/postsService\";\nimport actions from \"../store/actions/actions\";\nimport auth from \"../services/authService\";\nexport default function usePostsState() {\n  _s();\n\n  const [state, dispatch] = useReducer(postReducer, initialState);\n  useEffect(() => {\n    getPosts();\n  }, [state.posts]);\n\n  const getPosts = async () => {\n    try {\n      dispatch(actions.loading());\n      const {\n        data\n      } = await postService.getAllPosts();\n      dispatch(actions.getData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response || err.message));\n    }\n  };\n\n  const addPost = async post => {\n    try {\n      dispatch(actions.loading());\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(actions.addData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (user_id, post_id) => {\n    try {\n      dispatch(actions.loading());\n      const {\n        data\n      } = await postService.likePost(user_id, post_id);\n      dispatch(actions.updateData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleDisLike = async (user_id, post_id) => {\n    try {\n      dispatch(actions.loading());\n      const {\n        data\n      } = await postService.disLikePost(user_id, post_id);\n      dispatch(actions.updateData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  return [state, addPost, handleLike, handleDisLike];\n}\n\n_s(usePostsState, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/hooks/usePostsState.js"],"names":["useEffect","useReducer","postReducer","initialState","postService","actions","auth","usePostsState","state","dispatch","getPosts","posts","loading","data","getAllPosts","getData","err","error","response","message","addPost","post","user","getCurrentUser","author","id","createPost","addData","handleLike","user_id","post_id","likePost","updateData","handleDisLike","disLikePost"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport postService from \"../services/postsService\";\nimport actions from \"../store/actions/actions\";\nimport auth from \"../services/authService\";\n\nexport default function usePostsState() {\n  const [state, dispatch] = useReducer(postReducer, initialState);\n\n  useEffect(() => {\n    getPosts();\n  }, [state.posts]);\n\n  const getPosts = async () => {\n    try {\n      dispatch(actions.loading());\n\n      const { data } = await postService.getAllPosts();\n\n      dispatch(actions.getData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response || err.message));\n    }\n  };\n\n  const addPost = async (post) => {\n    try {\n      dispatch(actions.loading());\n\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(actions.addData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (user_id, post_id) => {\n    try {\n      dispatch(actions.loading());\n\n      const { data } = await postService.likePost(user_id, post_id);\n\n      dispatch(actions.updateData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleDisLike = async (user_id, post_id) => {\n    try {\n      dispatch(actions.loading());\n\n      const { data } = await postService.disLikePost(user_id, post_id);\n\n      dispatch(actions.updateData(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  return [state, addPost, handleLike, handleDisLike];\n}\n"]},"metadata":{},"sourceType":"module"}