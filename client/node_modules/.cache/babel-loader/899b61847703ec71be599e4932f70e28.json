{"ast":null,"code":"var emoji = require('emoji-regex');\n\nmodule.exports = BananaSlug;\nvar own = Object.hasOwnProperty;\nvar whitespace = /\\s/g;\nvar specials = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~’]/g;\n\nfunction BananaSlug() {\n  var self = this;\n  if (!(self instanceof BananaSlug)) return new BananaSlug();\n  self.reset();\n}\n/**\r\n * Generate a unique slug.\r\n * @param  {string} value String of text to slugify\r\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\r\n * @return {string}       A unique slug string\r\n */\n\n\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  var self = this;\n  var slug = slugger(value, maintainCase === true);\n  var originalSlug = slug;\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++;\n    slug = originalSlug + '-' + self.occurrences[originalSlug];\n  }\n\n  self.occurrences[slug] = 0;\n  return slug;\n};\n/**\r\n * Reset - Forget all previous slugs\r\n * @return void\r\n */\n\n\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null);\n};\n\nfunction slugger(string, maintainCase) {\n  if (typeof string !== 'string') return '';\n  if (!maintainCase) string = string.toLowerCase();\n  return string.trim().replace(specials, '').replace(emoji(), '').replace(whitespace, '-');\n}\n\nBananaSlug.slug = slugger;","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/node_modules/github-slugger/index.js"],"names":["emoji","require","module","exports","BananaSlug","own","Object","hasOwnProperty","whitespace","specials","self","reset","prototype","slug","value","maintainCase","slugger","originalSlug","call","occurrences","create","string","toLowerCase","trim","replace"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AAEA,IAAIC,GAAG,GAAGC,MAAM,CAACC,cAAjB;AACA,IAAIC,UAAU,GAAG,KAAjB;AACA,IAAIC,QAAQ,GAAG,gEAAf;;AAEA,SAASL,UAAT,GAAuB;AACrB,MAAIM,IAAI,GAAG,IAAX;AAEA,MAAI,EAAEA,IAAI,YAAYN,UAAlB,CAAJ,EAAmC,OAAO,IAAIA,UAAJ,EAAP;AAEnCM,EAAAA,IAAI,CAACC,KAAL;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAP,UAAU,CAACQ,SAAX,CAAqBC,IAArB,GAA4B,UAAUC,KAAV,EAAiBC,YAAjB,EAA+B;AACzD,MAAIL,IAAI,GAAG,IAAX;AACA,MAAIG,IAAI,GAAGG,OAAO,CAACF,KAAD,EAAQC,YAAY,KAAK,IAAzB,CAAlB;AACA,MAAIE,YAAY,GAAGJ,IAAnB;;AAEA,SAAOR,GAAG,CAACa,IAAJ,CAASR,IAAI,CAACS,WAAd,EAA2BN,IAA3B,CAAP,EAAyC;AACvCH,IAAAA,IAAI,CAACS,WAAL,CAAiBF,YAAjB;AACAJ,IAAAA,IAAI,GAAGI,YAAY,GAAG,GAAf,GAAqBP,IAAI,CAACS,WAAL,CAAiBF,YAAjB,CAA5B;AACD;;AAEDP,EAAAA,IAAI,CAACS,WAAL,CAAiBN,IAAjB,IAAyB,CAAzB;AAEA,SAAOA,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;;;AACAT,UAAU,CAACQ,SAAX,CAAqBD,KAArB,GAA6B,YAAY;AACvC,OAAKQ,WAAL,GAAmBb,MAAM,CAACc,MAAP,CAAc,IAAd,CAAnB;AACD,CAFD;;AAIA,SAASJ,OAAT,CAAkBK,MAAlB,EAA0BN,YAA1B,EAAwC;AACtC,MAAI,OAAOM,MAAP,KAAkB,QAAtB,EAAgC,OAAO,EAAP;AAChC,MAAI,CAACN,YAAL,EAAmBM,MAAM,GAAGA,MAAM,CAACC,WAAP,EAAT;AAEnB,SAAOD,MAAM,CAACE,IAAP,GACJC,OADI,CACIf,QADJ,EACc,EADd,EAEJe,OAFI,CAEIxB,KAAK,EAFT,EAEa,EAFb,EAGJwB,OAHI,CAGIhB,UAHJ,EAGgB,GAHhB,CAAP;AAID;;AAEDJ,UAAU,CAACS,IAAX,GAAkBG,OAAlB","sourcesContent":["var emoji = require('emoji-regex')\r\n\r\nmodule.exports = BananaSlug\r\n\r\nvar own = Object.hasOwnProperty\r\nvar whitespace = /\\s/g\r\nvar specials = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~’]/g\r\n\r\nfunction BananaSlug () {\r\n  var self = this\r\n\r\n  if (!(self instanceof BananaSlug)) return new BananaSlug()\r\n\r\n  self.reset()\r\n}\r\n\r\n/**\r\n * Generate a unique slug.\r\n * @param  {string} value String of text to slugify\r\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\r\n * @return {string}       A unique slug string\r\n */\r\nBananaSlug.prototype.slug = function (value, maintainCase) {\r\n  var self = this\r\n  var slug = slugger(value, maintainCase === true)\r\n  var originalSlug = slug\r\n\r\n  while (own.call(self.occurrences, slug)) {\r\n    self.occurrences[originalSlug]++\r\n    slug = originalSlug + '-' + self.occurrences[originalSlug]\r\n  }\r\n\r\n  self.occurrences[slug] = 0\r\n\r\n  return slug\r\n}\r\n\r\n/**\r\n * Reset - Forget all previous slugs\r\n * @return void\r\n */\r\nBananaSlug.prototype.reset = function () {\r\n  this.occurrences = Object.create(null)\r\n}\r\n\r\nfunction slugger (string, maintainCase) {\r\n  if (typeof string !== 'string') return ''\r\n  if (!maintainCase) string = string.toLowerCase()\r\n\r\n  return string.trim()\r\n    .replace(specials, '')\r\n    .replace(emoji(), '')\r\n    .replace(whitespace, '-')\r\n}\r\n\r\nBananaSlug.slug = slugger\r\n"]},"metadata":{},"sourceType":"script"}