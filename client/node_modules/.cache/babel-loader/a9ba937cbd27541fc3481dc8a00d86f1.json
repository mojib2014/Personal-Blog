{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(postReducer, initialState);\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n\n    try {\n      const {\n        data\n      } = await postService.getAllPosts();\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async post => {\n    dispatch(actions.loading());\n\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async post => {\n    if (auth.getCurrentUser()) {\n      if (post.like_user_id.includes(auth.getCurrentUser().id)) {\n        console.log(\"if statement called\");\n\n        try {\n          const {\n            data\n          } = await postService.disLikePost(auth.getCurrentUser().id, post.id);\n          dispatch(actions.like(data));\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      } else {\n        console.log(\"else statement called\");\n\n        try {\n          const {\n            data\n          } = await postService.likePost(auth.getCurrentUser().id, post.id);\n          dispatch(actions.disLike(data));\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      }\n    } else dispatch(actions.error(\"Please sign in\"));\n  };\n\n  const setSelectedPost = post => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: state.posts,\n      selectedPost: state.selectedPost,\n      loading: state.loading,\n      success: state.success,\n      error: state.error,\n      addPost,\n      handleLike,\n      setSelectedPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = PostProvider;\nexport default PostProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js"],"names":["useReducer","useEffect","PostContext","postReducer","initialState","actions","postService","auth","PostProvider","children","state","dispatch","getPosts","loading","data","getAllPosts","getAll","err","error","response","message","addPost","post","user","getCurrentUser","author","id","createPost","add","handleLike","like_user_id","includes","console","log","disLikePost","like","likePost","disLike","setSelectedPost","setSelected","posts","selectedPost","success"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\n\nconst PostProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(postReducer, initialState);\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n    try {\n      const { data } = await postService.getAllPosts();\n\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async (post) => {\n    dispatch(actions.loading());\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (post) => {\n    if (auth.getCurrentUser()) {\n      if (post.like_user_id.includes(auth.getCurrentUser().id)) {\n        console.log(\"if statement called\");\n        try {\n          const { data } = await postService.disLikePost(\n            auth.getCurrentUser().id,\n            post.id,\n          );\n          dispatch(actions.like(data));\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      } else {\n        console.log(\"else statement called\");\n        try {\n          const { data } = await postService.likePost(\n            auth.getCurrentUser().id,\n            post.id,\n          );\n          dispatch(actions.disLike(data));\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      }\n    } else dispatch(actions.error(\"Please sign in\"));\n  };\n\n  const setSelectedPost = (post) => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return (\n    <PostContext.Provider\n      value={{\n        posts: state.posts,\n        selectedPost: state.selectedPost,\n        loading: state.loading,\n        success: state.success,\n        error: state.error,\n        addPost,\n        handleLike,\n        setSelectedPost,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostProvider;\n"]},"metadata":{},"sourceType":"module"}