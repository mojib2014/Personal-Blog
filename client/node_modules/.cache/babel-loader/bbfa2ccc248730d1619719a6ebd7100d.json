{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField, TextareaAutosize, Button, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport actions from \"../store/actions/actions\";\nimport auth from \"../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500\n    }\n  }\n}));\nexport default function PostForm() {\n  _s();\n\n  const {\n    addPost,\n    posts,\n    err,\n    loading,\n    success\n  } = useContext(PostContext);\n  const [error, setError] = useState(null);\n  const classes = useStyles();\n  const schema = Yup.object().shape({\n    title: Yup.string().min(20).max(255).required().label(\"Ttitle\"),\n    body: Yup.string().min(200).required().label(\"Body\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      body: \"\"\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      addPost(values);\n      console.log(values);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SnackBar, {\n      message: error,\n      severity: error ? \"error\" : \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      className: classes.root,\n      style: {\n        width: 500,\n        margin: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"title\",\n        name: \"title\",\n        label: \"Title\",\n        type: \"title\",\n        value: formik.values.title,\n        onChange: formik.handleChange,\n        error: formik.touched.title && Boolean(formik.errors.title),\n        required: true,\n        helperText: formik.touched.title && formik.errors.title,\n        autoComplete: \"current-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        id: \"body\",\n        name: \"body\",\n        label: \"Body\",\n        type: \"textarea\",\n        maxRows: 10,\n        minRows: 15,\n        cols: 60,\n        onChange: formik.handleChange,\n        \"aria-label\": \"maximum height\",\n        placeholder: \"MAXIMUM 255 CHARACTERS\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: loading ? \"loading...\" : \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"7PJR88zC9C0ASKZpL6Mo7BuxalQ=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx"],"names":["React","useState","useContext","useFormik","Yup","TextField","TextareaAutosize","Button","makeStyles","SnackBar","PostContext","actions","auth","useStyles","theme","root","margin","spacing","width","PostForm","addPost","posts","err","loading","success","error","setError","classes","schema","object","shape","title","string","min","max","required","label","body","formik","initialValues","validationSchema","onSubmit","values","console","log","handleSubmit","handleChange","touched","Boolean","errors"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SACEC,SADF,EAEEC,gBAFF,EAGEC,MAHF,EAIEC,UAJF,QAKO,mBALP;AAMA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJ,4BAAwB;AACtBC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADc;AAEtBC,MAAAA,KAAK,EAAE;AAFe;AADpB;AADiC,CAAZ,CAAD,CAA5B;AASA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,GAAlB;AAAuBC,IAAAA,OAAvB;AAAgCC,IAAAA;AAAhC,MAA4CtB,UAAU,CAACQ,WAAD,CAA5D;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM0B,OAAO,GAAGd,SAAS,EAAzB;AAEA,QAAMe,MAAM,GAAGxB,GAAG,CAACyB,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,IAAAA,KAAK,EAAE3B,GAAG,CAAC4B,MAAJ,GAAaC,GAAb,CAAiB,EAAjB,EAAqBC,GAArB,CAAyB,GAAzB,EAA8BC,QAA9B,GAAyCC,KAAzC,CAA+C,QAA/C,CADyB;AAEhCC,IAAAA,IAAI,EAAEjC,GAAG,CAAC4B,MAAJ,GAAaC,GAAb,CAAiB,GAAjB,EAAsBE,QAAtB,GAAiCC,KAAjC,CAAuC,MAAvC;AAF0B,GAAnB,CAAf;AAKA,QAAME,MAAM,GAAGnC,SAAS,CAAC;AACvBoC,IAAAA,aAAa,EAAE;AACbR,MAAAA,KAAK,EAAE,EADM;AAEbM,MAAAA,IAAI,EAAE;AAFO,KADQ;AAKvBG,IAAAA,gBAAgB,EAAEZ,MALK;AAMvBa,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AACpBtB,MAAAA,OAAO,CAACsB,MAAD,CAAP;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD;AAVsB,GAAD,CAAxB;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAEjB,KAAnB;AAA0B,MAAA,QAAQ,EAAEA,KAAK,GAAG,OAAH,GAAa;AAAtD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AACE,MAAA,QAAQ,EAAEa,MAAM,CAACO,YADnB;AAEE,MAAA,SAAS,EAAElB,OAAO,CAACZ,IAFrB;AAGE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,GAAT;AAAcF,QAAAA,MAAM,EAAE;AAAtB,OAHT;AAAA,8BAKE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAC,OAJR;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,KAAK,EAAEsB,MAAM,CAACI,MAAP,CAAcX,KANvB;AAOE,QAAA,QAAQ,EAAEO,MAAM,CAACQ,YAPnB;AAQE,QAAA,KAAK,EAAER,MAAM,CAACS,OAAP,CAAehB,KAAf,IAAwBiB,OAAO,CAACV,MAAM,CAACW,MAAP,CAAclB,KAAf,CARxC;AASE,QAAA,QAAQ,MATV;AAUE,QAAA,UAAU,EAAEO,MAAM,CAACS,OAAP,CAAehB,KAAf,IAAwBO,MAAM,CAACW,MAAP,CAAclB,KAVpD;AAWE,QAAA,YAAY,EAAC;AAXf;AAAA;AAAA;AAAA;AAAA,cALF,eAkBE,QAAC,gBAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAC,MAHR;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,OAAO,EAAE,EALX;AAME,QAAA,OAAO,EAAE,EANX;AAOE,QAAA,IAAI,EAAE,EAPR;AAQE,QAAA,QAAQ,EAAEO,MAAM,CAACQ,YARnB;AASE,sBAAW,gBATb;AAUE,QAAA,WAAW,EAAC,wBAVd;AAWE,QAAA,QAAQ;AAXV;AAAA;AAAA;AAAA;AAAA,cAlBF,eA+BE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAC,WAAhC;AAA4C,QAAA,SAAS,MAArD;AAAsD,QAAA,IAAI,EAAC,QAA3D;AAAA,kBACGvB,OAAO,GAAG,YAAH,GAAkB;AAD5B;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;GAhEuBJ,Q;UAGNN,S,EAODV,S;;;KAVOgB,Q","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  TextField,\n  TextareaAutosize,\n  Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport actions from \"../store/actions/actions\";\nimport auth from \"../services/authService\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500,\n    },\n  },\n}));\n\nexport default function PostForm() {\n  const { addPost, posts, err, loading, success } = useContext(PostContext);\n  const [error, setError] = useState(null);\n  const classes = useStyles();\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(20).max(255).required().label(\"Ttitle\"),\n    body: Yup.string().min(200).required().label(\"Body\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      body: \"\",\n    },\n    validationSchema: schema,\n    onSubmit: (values) => {\n      addPost(values);\n\n      console.log(values);\n    },\n  });\n\n  return (\n    <div className=\"content\">\n      <h1>Post Form</h1>\n      <SnackBar message={error} severity={error ? \"error\" : \"success\"} />\n      <form\n        onSubmit={formik.handleSubmit}\n        className={classes.root}\n        style={{ width: 500, margin: \"auto\" }}\n      >\n        <TextField\n          fullWidth\n          id=\"title\"\n          name=\"title\"\n          label=\"Title\"\n          type=\"title\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n          error={formik.touched.title && Boolean(formik.errors.title)}\n          required\n          helperText={formik.touched.title && formik.errors.title}\n          autoComplete=\"current-title\"\n        />\n        <TextareaAutosize\n          id=\"body\"\n          name=\"body\"\n          label=\"Body\"\n          type=\"textarea\"\n          maxRows={10}\n          minRows={15}\n          cols={60}\n          onChange={formik.handleChange}\n          aria-label=\"maximum height\"\n          placeholder=\"MAXIMUM 255 CHARACTERS\"\n          required\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          {loading ? \"loading...\" : \"Submit\"}\n        </Button>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}