{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostProvider = ({\n  children\n}) => {\n  _s();\n\n  const [{\n    posts,\n    selectedPost,\n    loading,\n    success,\n    error\n  }, dispatch] = useReducer(postReducer, initialState);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n\n    try {\n      const {\n        data\n      } = await postService.getAllPosts();\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async post => {\n    console.log(\"addPost called: \");\n    dispatch(actions.loading());\n\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async item => {\n    if (item.liked) {\n      try {\n        console.log(\"in if block\");\n        const {\n          data\n        } = await postService.disLikePost(auth.getCurrentUser().id, item.id);\n        dispatch(actions.setSelected(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    } else {\n      console.log(\"in else block\");\n\n      try {\n        const {\n          data\n        } = await postService.likePost(auth.getCurrentUser().id, item.id);\n        dispatch(actions.setSelected(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    }\n  };\n\n  const setSelectedPost = post => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts,\n      selectedPost,\n      loading,\n      success,\n      error,\n      getPosts,\n      addPost,\n      handleLike,\n      setSelectedPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostProvider, \"LBQd6R1eeViOyoy0Ab7ik3GY0bk=\");\n\n_c = PostProvider;\nexport default PostProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js"],"names":["useReducer","PostContext","postReducer","initialState","actions","postService","auth","PostProvider","children","posts","selectedPost","loading","success","error","dispatch","getPosts","data","getAllPosts","getAll","err","response","message","addPost","post","console","log","user","getCurrentUser","author","id","createPost","add","handleLike","item","liked","disLikePost","setSelected","likePost","setSelectedPost"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\n\nconst PostProvider = ({ children }) => {\n  const [{ posts, selectedPost, loading, success, error }, dispatch] =\n    useReducer(postReducer, initialState);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n    try {\n      const { data } = await postService.getAllPosts();\n\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async (post) => {\n    console.log(\"addPost called: \");\n    dispatch(actions.loading());\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (item) => {\n    if (item.liked) {\n      try {\n        console.log(\"in if block\");\n\n        const { data } = await postService.disLikePost(\n          auth.getCurrentUser().id,\n          item.id,\n        );\n        dispatch(actions.setSelected(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    } else {\n      console.log(\"in else block\");\n      try {\n        const { data } = await postService.likePost(\n          auth.getCurrentUser().id,\n          item.id,\n        );\n        dispatch(actions.setSelected(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    }\n  };\n\n  const setSelectedPost = (post) => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return (\n    <PostContext.Provider\n      value={{\n        posts,\n        selectedPost,\n        loading,\n        success,\n        error,\n        getPosts,\n        addPost,\n        handleLike,\n        setSelectedPost,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostProvider;\n"]},"metadata":{},"sourceType":"module"}