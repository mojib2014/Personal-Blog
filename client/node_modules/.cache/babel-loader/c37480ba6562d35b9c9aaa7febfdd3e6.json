{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar svg = require('property-information/svg');\n\nvar find = require('property-information/find');\n\nvar spaces = require('space-separated-tokens');\n\nvar commas = require('comma-separated-tokens');\n\nvar entities = require('stringify-entities');\n\nvar ccount = require('ccount');\n\nvar all = require('./all');\n\nvar constants = require('./constants');\n\nmodule.exports = serializeElement;\n\nfunction serializeElement(ctx, node, index, parent) {\n  var schema = ctx.schema;\n  var omit = schema.space === 'svg' ? false : ctx.omit;\n  var parts = [];\n  var selfClosing = schema.space === 'svg' ? ctx.closeEmpty : ctx.voids.indexOf(node.tagName.toLowerCase()) > -1;\n  var attrs;\n  var content;\n  var last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg;\n  }\n\n  attrs = serializeAttributes(ctx, node.properties);\n  content = all(ctx, schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  ctx.schema = schema; // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n\n  if (content) selfClosing = false;\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1);\n\n      if (!ctx.tightClose || last === '/' || schema.space === 'svg' && last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('');\n}\n\nfunction serializeAttributes(ctx, props) {\n  var values = [];\n  var index = -1;\n  var key;\n  var value;\n  var last;\n\n  for (key in props) {\n    if (props[key] != null) {\n      value = serializeAttribute(ctx, key, props[key]);\n      if (value) values.push(value);\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null; // In tight mode, don’t add a space after quoted attributes.\n\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('');\n}\n\nfunction serializeAttribute(ctx, key, value) {\n  var info = find(ctx.schema, key);\n  var quote = ctx.quote;\n  var result;\n  var name;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n\n  if (value == null || value === false || typeof value === 'number' && value !== value) {\n    return '';\n  }\n\n  name = entities(info.attribute, xtend(ctx.entities, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n  })); // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n\n  if (value === true) return name;\n  value = typeof value === 'object' && 'length' in value ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  (info.commaSeparated ? commas.stringify : spaces.stringify)(value, {\n    padLeft: !ctx.tightLists\n  }) : String(value);\n  if (ctx.collapseEmpty && !value) return name; // Check unquoted value.\n\n  if (ctx.unquoted) {\n    result = entities(value, xtend(ctx.entities, {\n      subset: constants.unquoted[ctx.valid][ctx.safe],\n      attribute: true\n    }));\n  } // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n\n\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative;\n    }\n\n    result = quote + entities(value, xtend(ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe],\n      attribute: true\n    })) + quote;\n  } // Don’t add a `=` for unquoted empties.\n\n\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/node_modules/hast-util-to-html/lib/element.js"],"names":["xtend","require","svg","find","spaces","commas","entities","ccount","all","constants","module","exports","serializeElement","ctx","node","index","parent","schema","omit","space","parts","selfClosing","closeEmpty","voids","indexOf","tagName","toLowerCase","attrs","content","last","serializeAttributes","properties","opening","push","close","charAt","length","tightClose","closing","join","props","values","key","value","serializeAttribute","tight","info","quote","result","name","overloadedBoolean","attribute","boolean","Boolean","subset","valid","safe","commaSeparated","stringify","padLeft","tightLists","String","collapseEmpty","unquoted","smart","alternative","single","double"],"mappings":"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","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar svg = require('property-information/svg')\nvar find = require('property-information/find')\nvar spaces = require('space-separated-tokens')\nvar commas = require('comma-separated-tokens')\nvar entities = require('stringify-entities')\nvar ccount = require('ccount')\nvar all = require('./all')\nvar constants = require('./constants')\n\nmodule.exports = serializeElement\n\nfunction serializeElement(ctx, node, index, parent) {\n  var schema = ctx.schema\n  var omit = schema.space === 'svg' ? false : ctx.omit\n  var parts = []\n  var selfClosing =\n    schema.space === 'svg'\n      ? ctx.closeEmpty\n      : ctx.voids.indexOf(node.tagName.toLowerCase()) > -1\n  var attrs\n  var content\n  var last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg\n  }\n\n  attrs = serializeAttributes(ctx, node.properties)\n\n  content = all(\n    ctx,\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  ctx.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === '/' ||\n        (schema.space === 'svg' && last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\nfunction serializeAttributes(ctx, props) {\n  var values = []\n  var index = -1\n  var key\n  var value\n  var last\n\n  for (key in props) {\n    if (props[key] != null) {\n      value = serializeAttribute(ctx, key, props[key])\n      if (value) values.push(value)\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\nfunction serializeAttribute(ctx, key, value) {\n  var info = find(ctx.schema, key)\n  var quote = ctx.quote\n  var result\n  var name\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value == null ||\n    value === false ||\n    (typeof value === 'number' && value !== value)\n  ) {\n    return ''\n  }\n\n  name = entities(\n    info.attribute,\n    xtend(ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset:\n        constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  value =\n    typeof value === 'object' && 'length' in value\n      ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n        // keep the code cleaner.\n        (info.commaSeparated ? commas.stringify : spaces.stringify)(value, {\n          padLeft: !ctx.tightLists\n        })\n      : String(value)\n\n  if (ctx.collapseEmpty && !value) return name\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = entities(\n      value,\n      xtend(ctx.entities, {\n        subset: constants.unquoted[ctx.valid][ctx.safe],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative\n    }\n\n    result =\n      quote +\n      entities(\n        value,\n        xtend(ctx.entities, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[\n            ctx.schema.space === 'html' ? ctx.valid : 1\n          ][ctx.safe],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"]},"metadata":{},"sourceType":"script"}