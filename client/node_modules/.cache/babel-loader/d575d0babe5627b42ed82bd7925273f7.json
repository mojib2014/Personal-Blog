{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField, TextareaAutosize, Button, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500\n    }\n  }\n}));\nexport default function PostForm() {\n  _s();\n\n  const {\n    addPost,\n    err,\n    loading,\n    success\n  } = useContext(PostContext);\n  const [error, setError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    setOpen(false);\n    if (reason = \"clickaway\") return;\n  };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(20).max(255).required().label(\"Ttitle\"),\n    body: Yup.string().min(50).required().label(\"Body\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      body: \"\"\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      addPost(values);\n\n      if (err) {\n        setError(err);\n        setOpen(true);\n      }\n    }\n  });\n  console.log(\"post form \", err);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      style: {\n        width: 500,\n        margin: \"auto\"\n      },\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"title\",\n        name: \"title\",\n        label: \"Title\",\n        type: \"text\",\n        value: formik.values.title,\n        onChange: formik.handleChange,\n        error: formik.touched.title && Boolean(formik.errors.title),\n        required: true,\n        helperText: formik.touched.title && formik.errors.title,\n        autoComplete: \"current-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        id: \"body\",\n        name: \"body\",\n        label: \"Body\",\n        type: \"textarea\",\n        maxRows: 10,\n        minRows: 15,\n        cols: 60,\n        value: formik.values.body,\n        onChange: formik.handleChange,\n        \"aria-label\": \"maximum height\",\n        placeholder: \"MAXIMUM 255 CHARACTERS\",\n        error: formik.touched.title && Boolean(formik.errors.body).toString(),\n        required: true,\n        autoComplete: \"current-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: loading ? \"loading...\" : \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SnackBar, {\n      message: error,\n      severity: error ? \"error\" : \"success\",\n      success: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"wsyGEKM/0syd7/fqmrj2wBBZgsE=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx"],"names":["React","useState","useContext","useFormik","Yup","TextField","TextareaAutosize","Button","makeStyles","SnackBar","PostContext","useStyles","theme","root","margin","spacing","width","PostForm","addPost","err","loading","success","error","setError","open","setOpen","classes","handleClick","handleClose","event","reason","schema","object","shape","title","string","min","max","required","label","body","formik","initialValues","validationSchema","onSubmit","values","console","log","handleSubmit","handleChange","touched","Boolean","errors","toString"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  TextField,\n  TextareaAutosize,\n  Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500,\n    },\n  },\n}));\n\nexport default function PostForm() {\n  const { addPost, err, loading, success } = useContext(PostContext);\n  const [error, setError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    setOpen(false);\n    if ((reason = \"clickaway\")) return;\n  };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(20).max(255).required().label(\"Ttitle\"),\n    body: Yup.string().min(50).required().label(\"Body\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      body: \"\",\n    },\n    validationSchema: schema,\n    onSubmit: (values) => {\n      addPost(values);\n\n      if (err) {\n        setError(err);\n        setOpen(true);\n      }\n    },\n  });\n\n  console.log(\"post form \", err);\n\n  return (\n    <div className=\"content\">\n      <h1>Post Form</h1>\n      <form\n        className={classes.root}\n        style={{ width: 500, margin: \"auto\" }}\n        onSubmit={formik.handleSubmit}\n      >\n        <TextField\n          fullWidth\n          id=\"title\"\n          name=\"title\"\n          label=\"Title\"\n          type=\"text\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n          error={formik.touched.title && Boolean(formik.errors.title)}\n          required\n          helperText={formik.touched.title && formik.errors.title}\n          autoComplete=\"current-title\"\n        />\n        <TextareaAutosize\n          id=\"body\"\n          name=\"body\"\n          label=\"Body\"\n          type=\"textarea\"\n          maxRows={10}\n          minRows={15}\n          cols={60}\n          value={formik.values.body}\n          onChange={formik.handleChange}\n          aria-label=\"maximum height\"\n          placeholder=\"MAXIMUM 255 CHARACTERS\"\n          error={formik.touched.title && Boolean(formik.errors.body).toString()}\n          required\n          autoComplete=\"current-title\"\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          {loading ? \"loading...\" : \"Submit\"}\n        </Button>\n      </form>\n      <SnackBar\n        message={error}\n        severity={error ? \"error\" : \"success\"}\n        success={success}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}