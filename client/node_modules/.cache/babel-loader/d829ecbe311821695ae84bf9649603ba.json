{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostProvider = ({\n  children\n}) => {\n  _s();\n\n  const [{\n    posts,\n    selectedPost,\n    loading,\n    success,\n    error\n  }, dispatch] = useReducer(postReducer, initialState);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n\n    try {\n      const {\n        data\n      } = await postService.getAllPosts();\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async post => {\n    dispatch(actions.loading());\n\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async item => {\n    if (item.liked) {\n      console.log(\"if statement called\");\n\n      if (!item.like_user_id.includes(await auth.getCurrentUser())) {\n        try {\n          await postService.updateLiked(item);\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      }\n\n      try {\n        const {\n          data\n        } = await postService.disLikePost(auth.getCurrentUser().id, item.id);\n        dispatch(actions.add(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    } else {\n      console.log(\"else statement called\");\n\n      try {\n        const {\n          data\n        } = await postService.likePost(auth.getCurrentUser().id, item.id);\n        dispatch(actions.add(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    }\n  };\n\n  const setSelectedPost = post => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts,\n      selectedPost,\n      loading,\n      success,\n      error,\n      getPosts,\n      addPost,\n      updateLiked,\n      handleLike,\n      setSelectedPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostProvider, \"LBQd6R1eeViOyoy0Ab7ik3GY0bk=\");\n\n_c = PostProvider;\nexport default PostProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/context/providers/PostProvider.js"],"names":["useReducer","PostContext","postReducer","initialState","actions","postService","auth","PostProvider","children","posts","selectedPost","loading","success","error","dispatch","getPosts","data","getAllPosts","getAll","err","response","message","addPost","post","user","getCurrentUser","author","id","createPost","add","handleLike","item","liked","console","log","like_user_id","includes","updateLiked","disLikePost","likePost","setSelectedPost","setSelected"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport { PostContext } from \"../postContext\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport actions from \"../actions/actions\";\nimport postService from \"../../services/postsService\";\nimport auth from \"../../services/authService\";\n\nconst PostProvider = ({ children }) => {\n  const [{ posts, selectedPost, loading, success, error }, dispatch] =\n    useReducer(postReducer, initialState);\n\n  const getPosts = async () => {\n    dispatch(actions.loading());\n    try {\n      const { data } = await postService.getAllPosts();\n\n      dispatch(actions.getAll(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const addPost = async (post) => {\n    dispatch(actions.loading());\n    try {\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(actions.add(data));\n    } catch (err) {\n      dispatch(actions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (item) => {\n    if (item.liked) {\n      console.log(\"if statement called\");\n      if (!item.like_user_id.includes(await auth.getCurrentUser())) {\n        try {\n          await postService.updateLiked(item);\n        } catch (err) {\n          dispatch(actions.error(err.response.data || err.message));\n        }\n      }\n      try {\n        const { data } = await postService.disLikePost(\n          auth.getCurrentUser().id,\n          item.id,\n        );\n        dispatch(actions.add(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    } else {\n      console.log(\"else statement called\");\n      try {\n        const { data } = await postService.likePost(\n          auth.getCurrentUser().id,\n          item.id,\n        );\n        dispatch(actions.add(data));\n      } catch (err) {\n        dispatch(actions.error(err.response.data || err.message));\n      }\n    }\n  };\n\n  const setSelectedPost = (post) => {\n    dispatch(actions.setSelected(post));\n  };\n\n  return (\n    <PostContext.Provider\n      value={{\n        posts,\n        selectedPost,\n        loading,\n        success,\n        error,\n        getPosts,\n        addPost,\n        updateLiked,\n        handleLike,\n        setSelectedPost,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostProvider;\n"]},"metadata":{},"sourceType":"module"}