{"ast":null,"code":"import { selectWord } from '../utils/markdownUtils';\nexport var comment = {\n  name: 'comment',\n  keyCommand: 'comment',\n  shortcuts: 'ctrlcmd+/',\n  execute: function execute(state, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the bold mark up\n\n    var state2 = api.replaceSelection(\"<!-- \".concat(state1.selectedText, \" -->\")); // Adjust the selection to not contain the **\n\n    api.setSelectionRange({\n      start: state2.selection.end - 4 - state1.selectedText.length,\n      end: state2.selection.end - 4\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/commands/comment.tsx"],"names":["comment","name","keyCommand","shortcuts","execute","newSelectionRange","selectWord","text","state","selection","state1","api","state2","start","end"],"mappings":"AACA,SAAA,UAAA,QAAA,wBAAA;AAEA,OAAO,IAAMA,OAAiB,GAAG;AAC/BC,EAAAA,IAAI,EAD2B,SAAA;AAE/BC,EAAAA,UAAU,EAFqB,SAAA;AAG/BC,EAAAA,SAAS,EAHsB,WAAA;AAI/BC,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAA4C;AACnD;AACA,QAAMC,iBAAiB,GAAGC,UAAU,CAAC;AAAEC,MAAAA,IAAI,EAAEC,KAAK,CAAb,IAAA;AAAoBC,MAAAA,SAAS,EAAED,KAAK,CAACC;AAArC,KAAD,CAApC;AACA,QAAMC,MAAM,GAAGC,GAAG,CAAHA,iBAAAA,CAHoC,iBAGpCA,CAAf,CAHmD,CAInD;;AACA,QAAMC,MAAM,GAAGD,GAAG,CAAHA,gBAAAA,CAAAA,QAAAA,MAAAA,CAA6BD,MAAM,CAAnCC,YAAAA,EALoC,MAKpCA,CAAAA,CAAf,CALmD,CAMnD;;AACAA,IAAAA,GAAG,CAAHA,iBAAAA,CAAsB;AACpBE,MAAAA,KAAK,EAAED,MAAM,CAANA,SAAAA,CAAAA,GAAAA,GAAAA,CAAAA,GAA2BF,MAAM,CAANA,YAAAA,CADd,MAAA;AAEpBI,MAAAA,GAAG,EAAEF,MAAM,CAANA,SAAAA,CAAAA,GAAAA,GAAuB;AAFR,KAAtBD;AAID;AAf8B,CAA1B","sourcesContent":["import { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const comment: ICommand = {\n  name: 'comment',\n  keyCommand: 'comment',\n  shortcuts: 'ctrlcmd+/',\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    const state2 = api.replaceSelection(`<!-- ${state1.selectedText} -->`);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start: state2.selection.end - 4 - state1.selectedText.length,\n      end: state2.selection.end - 4,\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}