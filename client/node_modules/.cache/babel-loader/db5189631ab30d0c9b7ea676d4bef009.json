{"ast":null,"code":"var _jsxFileName = \"/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useFormik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport \"../index.less\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500\n    }\n  }\n}));\nexport default function PostForm() {\n  _s();\n\n  const {\n    addPost,\n    err,\n    loading,\n    success\n  } = useContext(PostContext); // const [error, setError] = useState(null);\n  // const [open, setOpen] = useState(false);\n\n  const [value, setValue] = useState(\"\"); // const [title, setTitle] = useState(\"\");\n  // const classes = useStyles();\n  // const handleClick = () => {\n  //   setOpen(true);\n  // };\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") return setOpen(false);\n  // };\n  // const handleTitleChange = async ({ currentTarget: input }) => {\n  //   setTitle(input.value);\n  // };\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   addPost({ title: title, body: value });\n  //   handleClick();\n  // };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(5).max(255).required().label(\"Title\")\n  });\n\n  const handleSubmit = post => {\n    console.log(\"post\", post);\n    addPost(post);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\"\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      addPost({ ...values,\n        body: value\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      values: {\n        title: \"\",\n        body: \"\"\n      },\n      schema: schema,\n      formTitle: \"Post Form\",\n      onSubmit: handleSubmit,\n      bodyValue: value,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"title\",\n        type: \"text\",\n        name: \"title\",\n        label: \"Title\",\n        value: formik.values.title,\n        onChange: formik.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: value,\n        onChange: setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"SZEersfA/7xV/du8bOL7f9o//SI=\", false, function () {\n  return [useFormik];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/components/PostForm.jsx"],"names":["React","useState","useContext","useFormik","Form","Yup","MDEditor","TextField","makeStyles","SnackBar","PostContext","useStyles","theme","root","margin","spacing","width","PostForm","addPost","err","loading","success","value","setValue","schema","object","shape","title","string","min","max","required","label","handleSubmit","post","console","log","formik","initialValues","validationSchema","onSubmit","values","body","handleChange"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useFormik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\nimport SnackBar from \"../common/SnackBar\";\nimport PostContext from \"../context/postContext\";\nimport \"../index.less\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 500,\n    },\n  },\n}));\n\nexport default function PostForm() {\n  const { addPost, err, loading, success } = useContext(PostContext);\n  // const [error, setError] = useState(null);\n  // const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  // const [title, setTitle] = useState(\"\");\n  // const classes = useStyles();\n\n  // const handleClick = () => {\n  //   setOpen(true);\n  // };\n\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") return setOpen(false);\n  // };\n\n  // const handleTitleChange = async ({ currentTarget: input }) => {\n  //   setTitle(input.value);\n  // };\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   addPost({ title: title, body: value });\n  //   handleClick();\n  // };\n\n  const schema = Yup.object().shape({\n    title: Yup.string().min(5).max(255).required().label(\"Title\"),\n  });\n\n  const handleSubmit = (post) => {\n    console.log(\"post\", post);\n    addPost(post);\n  };\n\n  const formik = useFormik({\n    initialValues: { title: \"\" },\n    validationSchema: schema,\n    onSubmit: (values) => {\n      addPost({ ...values, body: value });\n    },\n  });\n\n  return (\n    <div className=\"content\">\n      <Form\n        values={{ title: \"\", body: \"\" }}\n        schema={schema}\n        formTitle=\"Post Form\"\n        onSubmit={handleSubmit}\n        bodyValue={value}\n      >\n        <TextField\n          fullWidth\n          id=\"title\"\n          type=\"text\"\n          name=\"title\"\n          label=\"Title\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n        />\n\n        <MDEditor value={value} onChange={setValue} />\n      </Form>\n      {/* <MDEditor.Markdown source={value} /> */}\n      {/* <SnackBar\n        message={error}\n        severity={error ? \"error\" : \"success\"}\n        success={success}\n        open={open}\n        onClose={handleClose}\n      /> */}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}