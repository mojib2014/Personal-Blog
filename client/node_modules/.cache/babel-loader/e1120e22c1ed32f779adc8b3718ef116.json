{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport postService from \"../services/postsService\";\nimport postActions from \"../actions/postActions\";\nimport auth from \"../services/authService\";\nexport default function usePostsState() {\n  _s();\n\n  const [state, dispatch] = useReducer(postReducer, initialState);\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const getPosts = async () => {\n    try {\n      dispatch(postActions.loading());\n      const {\n        data\n      } = await postService.getAllPosts();\n      dispatch(postActions.getPosts(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response || err.message));\n    }\n  };\n\n  const addPost = async post => {\n    try {\n      dispatch(postActions.loading());\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n      const {\n        data\n      } = await postService.createPost(post);\n      dispatch(postActions.addPost(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (user_id, post_id) => {\n    try {\n      dispatch(postActions.loading());\n      const {\n        data\n      } = await postService.likePost(user_id, post_id);\n      dispatch(postActions.like(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleDisLike = async (user_id, post_id) => {\n    try {\n      dispatch(postActions.loading());\n      const {\n        data\n      } = await postService.disLikePost(user_id, post_id);\n      dispatch(postActions.disLike(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const setSelectedPost = post => {\n    try {\n      dispatch(postActions.loading());\n      dispatch(postActions.setSelectedPost(post));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  return [state, addPost, setSelectedPost, handleLike, handleDisLike];\n}\n\n_s(usePostsState, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");","map":{"version":3,"sources":["/Users/mojib2014/Desktop/projects/node_projects/blog/client/src/hooks/usePostsState.js"],"names":["useEffect","useReducer","postReducer","initialState","postService","postActions","auth","usePostsState","state","dispatch","getPosts","loading","data","getAllPosts","err","error","response","message","addPost","post","user","getCurrentUser","author","id","createPost","handleLike","user_id","post_id","likePost","like","handleDisLike","disLikePost","disLike","setSelectedPost"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { postReducer, initialState } from \"../reducers/postReducer\";\nimport postService from \"../services/postsService\";\nimport postActions from \"../actions/postActions\";\nimport auth from \"../services/authService\";\n\nexport default function usePostsState() {\n  const [state, dispatch] = useReducer(postReducer, initialState);\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const getPosts = async () => {\n    try {\n      dispatch(postActions.loading());\n\n      const { data } = await postService.getAllPosts();\n\n      dispatch(postActions.getPosts(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response || err.message));\n    }\n  };\n\n  const addPost = async (post) => {\n    try {\n      dispatch(postActions.loading());\n\n      const user = await auth.getCurrentUser();\n      post.author = user.id;\n\n      const { data } = await postService.createPost(post);\n\n      dispatch(postActions.addPost(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleLike = async (user_id, post_id) => {\n    try {\n      dispatch(postActions.loading());\n\n      const { data } = await postService.likePost(user_id, post_id);\n\n      dispatch(postActions.like(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const handleDisLike = async (user_id, post_id) => {\n    try {\n      dispatch(postActions.loading());\n\n      const { data } = await postService.disLikePost(user_id, post_id);\n\n      dispatch(postActions.disLike(data));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  const setSelectedPost = (post) => {\n    try {\n      dispatch(postActions.loading());\n\n      dispatch(postActions.setSelectedPost(post));\n    } catch (err) {\n      dispatch(postActions.error(err.response.data || err.message));\n    }\n  };\n\n  return [state, addPost, setSelectedPost, handleLike, handleDisLike];\n}\n"]},"metadata":{},"sourceType":"module"}