{"ast":null,"code":"import React, { useContext, useEffect, useMemo } from 'react';\nimport rehype from 'rehype'; // @ts-ignore\n\nimport rehypePrism from '@mapbox/rehype-prism';\nimport { EditorContext } from '../../Context';\nexport default function Markdown(props) {\n  var prefixCls = props.prefixCls;\n\n  var _useContext = useContext(EditorContext),\n      _useContext$markdown = _useContext.markdown,\n      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,\n      highlightEnable = _useContext.highlightEnable,\n      dispatch = _useContext.dispatch;\n\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(function () {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  function html2Escape(sHtml) {\n    return sHtml.replace(/[<>&\"]/g, function (c) {\n      return {\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;'\n      }[c];\n    });\n  }\n\n  return useMemo(function () {\n    if (!highlightEnable || !markdown) return /*#__PURE__*/React.createElement(\"pre\", {\n      children: markdown || '',\n      ref: preRef,\n      className: \"\".concat(prefixCls, \"-text-pre wmde-markdown-color\")\n    });\n    var str = rehype().data('settings', {\n      fragment: false\n    }).use(rehypePrism, {\n      ignoreMissing: true\n    }).processSync(\"<pre class=\\\"language-markdown \".concat(prefixCls, \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\").concat(html2Escape(markdown || ''), \"</code></pre>\"));\n    return /*#__PURE__*/React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: {\n        __html: str.contents\n      }\n    });\n  }, [highlightEnable, markdown, preRef, prefixCls]);\n}","map":{"version":3,"sources":["../../../../src/components/TextArea/Markdown.tsx"],"names":["prefixCls","props","markdown","highlightEnable","dispatch","useContext","preRef","React","useEffect","textareaPre","current","useMemo","str","fragment","ignoreMissing","html2Escape","className","dangerouslySetInnerHTML","__html","contents"],"mappings":"AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,SAAA,EAAA,OAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,QAAA,C,CACA;;AACA,OAAA,WAAA,MAAA,sBAAA;AAEA,SAAA,aAAA,QAAA,eAAA;AAIA,eAAe,SAAA,QAAA,CAAA,KAAA,EAAwC;AACrD,MAAQA,SAAR,GAAsBC,KAAtB,CAAA,SAAA;;AACA,MAAA,WAAA,GAAqDI,UAAU,CAA/D,aAA+D,CAA/D;AAAA,MAAA,oBAAA,GAAA,WAAA,CAAA,QAAA;AAAA,MAAQH,QAAR,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,oBAAA;AAAA,MAAuBC,eAAvB,GAAA,WAAA,CAAA,eAAA;AAAA,MAAwCC,QAAxC,GAAA,WAAA,CAAA,QAAA;;AACA,MAAME,MAAM,GAAA,aAAGC,KAAK,CAApB,SAAeA,EAAf;AACAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIF,MAAM,CAANA,OAAAA,IAAJ,QAAA,EAAgC;AAC9BF,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,WAAW,EAAEH,MAAM,CAACI;AAAtB,OAAD,CAARN;AAFY,KAAA,CAId;;AAJO,GAAA,EAATI,EAAS,CAATA;;AAMA,WAAA,WAAA,CAAA,KAAA,EAAoC;AAClC,WAAO,KAAK,CAAL,OAAA,CAAA,SAAA,EAEL,UAAA,CAAA,EAAA;AAAA,aAAiB;AAAE,aAAF,MAAA;AAAe,aAAf,MAAA;AAA4B,aAA5B,OAAA;AAA0C,aAAK;AAA/C,QAAjB,CAAiB,CAAjB;AAFF,KAAO,CAAP;AAID;;AAED,SAAOG,OAAO,CAAC,YAAM;AACnB,QAAI,CAAA,eAAA,IAAoB,CAAxB,QAAA,EACE,OAAA,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,QAAQ,EAAET,QAAQ,IAAvB,EAAA;AAA+B,MAAA,GAAG,EAAlC,MAAA;AAA4C,MAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,+BAAA;AAArD,KAAA,CAAP;AACF,QAAMU,GAAG,GAAG,MAAM,GAAN,IAAA,CAAA,UAAA,EACQ;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADR,EAAA,GAAA,CAAA,WAAA,EAEQ;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAFR,EAAA,WAAA,CAAA,kCAAA,MAAA,CAAA,SAAA,EAAA,oEAAA,EAAA,MAAA,CAIoGC,WAAW,CACrHb,QAAQ,IALF,EAI+G,CAJ/G,EAAZ,eAAY,CAAA,CAAZ;AAQA,WAAA,aAAO,KAAK,CAAL,aAAA,CAAA,KAAA,EAA2B;AAChCc,MAAAA,SAAS,EADuB,qBAAA;AAEhCC,MAAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAEN,GAAG,CAACO;AAAd;AAFO,KAA3B,CAAP;AAXY,GAAA,EAeX,CAAA,eAAA,EAAA,QAAA,EAAA,MAAA,EAfH,SAeG,CAfW,CAAd;AAgBD","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport rehype from 'rehype';\n// @ts-ignore\nimport rehypePrism from '@mapbox/rehype-prism';\nimport { IProps } from '../../utils';\nimport { EditorContext } from '../../Context';\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  function html2Escape(sHtml: string) {\n    return sHtml.replace(\n      /[<>&\"]/g,\n      (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n    );\n  }\n\n  return useMemo(() => {\n    if (!highlightEnable || !markdown)\n      return <pre children={markdown || ''} ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />;\n    const str = rehype()\n      .data('settings', { fragment: false })\n      .use(rehypePrism, { ignoreMissing: true })\n      .processSync(\n        `<pre class=\"language-markdown ${prefixCls}-text-pre wmde-markdown-color\"><code class=\"language-markdown\">${html2Escape(\n          markdown || '',\n        )}</code></pre>`,\n      );\n    return React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: { __html: str.contents as string },\n    });\n  }, [highlightEnable, markdown, preRef, prefixCls]);\n}\n"]},"metadata":{},"sourceType":"module"}